<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="md__c_1__users__c6-_p_r_o_f__downloads__qtsupervisory-master__qtsupervisory-master__r_e_a_d_m_e" kind="page">
    <compoundname>md_C:_Users_C6-PROF_Downloads_Qtsupervisory-master_Qtsupervisory-master_README</compoundname>
    <title>Projeto de Programação</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="2">Apresentação</heading>
</para><para>O presente projeto visa desenvolver o aluno na prática de programação orientada a objetos usando a biblioteca Qt.</para><para>O projeto consiste em três programas de computador que trabalham em conjunto para simular um sistema simples de aquisição e supervisão de dados usando comunicação TCP/IP em uma rede local.</para><para>Em suma, os três módulos devem ser capazes de realizar as seguintes operações:</para><para><itemizedlist>
<listitem><para>O <bold>servidor</bold> deve esperar conexões TCP destinadas à porta 1234, e responder ao cliente conforme os comandos que este enviar.</para></listitem><listitem><para>O <bold>cliente produtor</bold> de dados deve ser capaz de se conectar a uma máquina executando o servidor na porta 1234 e enviar, usando comandos específicos, marcações de data/hora juntamente com uma informação em ponto flutuante para ser gravada.</para></listitem><listitem><para>O <bold>cliente supervisor</bold> de dados deve ser capaz de se conectar a uma máquina executando o servidor na porta 1234 e recuperar, usando comandos específicos, a lista dos clientes produtores de dados, bem como listagens de dados produzidos por um destes clientes produtores.</para></listitem></itemizedlist>
</para><para>O aluno deverá desenvolver apenas os <bold>cliente produtor</bold> e o <bold>cliente supervisor</bold>. O módulo <bold>servidor</bold> já está pronto e não precisa ser trabalhado.</para><para><heading level="2">O módulo servidor</heading>
</para><para>O módulo servidor implementa o que se chama de servidor TCP. Em outras palavras, esse programa é capaz de escutar a rede local e aguardar por conexões remotas destinadas à porta TCP/1234.</para><para>Em redes TCP/IP, o protocolo de comunicação TCP permite a criação de um circuito virtual, um canal de comunicação que pode ser usado para enviar e receber sequências de bytes pela Internet. O canal é fechado apenas quando a conexão é interrompida.</para><para>Para se abrir uma conexão com uma máquina que executa um determinado serviço usando o protocolo TCP é necessário que se conheça seu endereço IP (ou nome) e uma <emphasis>porta</emphasis> onde o serviço será provido. Quando a conexão é aberta para um novo cliente, inicia-se um <emphasis>socket</emphasis> de comunicação, identificado, entre outras coisas, pela combinação IP+porta. Cada <emphasis>socket</emphasis> possui um número único que pode ser usado para distinguir entre as várias conexões que podem chegar à mesma porta. Isso é comum em máquinas que provêem serviços a vários clientes.</para><para>Máquinas que aguardam conexões comumente chamadas de <bold>servidores</bold>. O servidor implementado neste projeto <emphasis>escuta</emphasis> a porta <bold>1234</bold>. Uma vez que um cliente se conecte a esta, as tarefas que o servidor irá executar dependerão de mensagens enviadas pelo cliente. Para cada mensagem, uma tarefa diferente é executada. É dessa maneira que os vários serviços na Internet funcionam.</para><para>O servidor do projeto não necessita de modificações para funcionar. Basta abrir o projeto no QtCreator, compilar e executar o código. O servidor é capaz de interpretar mensagens em texto simples que lhe forem enviadas. As mensagens aceitas pelo servidor formam o que se chama de <bold>protocolo de aplicação</bold> para este serviço. Três mensagens são suportadas nesse protocolo:</para><para><programlisting><codeline><highlight class="normal">list</highlight></codeline>
<codeline><highlight class="normal">get<sp/>NUMERO_IP<sp/>N_AMOSTRAS</highlight></codeline>
<codeline><highlight class="normal">set<sp/>DATA_E_HORA_EM_MS<sp/>DADO</highlight></codeline>
</programlisting></para><para>O comando **_list_** retorna a lista de máquinas cujos dados produzidos encontram-se armazenados no servidor. ex: <programlisting><codeline><highlight class="normal">$<sp/>telnet<sp/>127.0.0.1<sp/>1234</highlight></codeline>
<codeline><highlight class="normal">list</highlight></codeline>
<codeline><highlight class="normal">127.0.0.1</highlight></codeline>
</programlisting></para><para>O comando **_get_** precisa que se forneça também o número IP do <bold>cliente produtor</bold> que se deseja recuperar o conjunto de dados produzidos. ex:</para><para><programlisting><codeline><highlight class="normal">$<sp/>telnet<sp/>127.0.0.1<sp/>1234</highlight></codeline>
<codeline><highlight class="normal">get<sp/>127.0.0.1<sp/>1</highlight></codeline>
<codeline><highlight class="normal">1496658174409<sp/>34</highlight></codeline>
</programlisting></para><para>O comando **_set_** precisa que se forneça uma combinação DATA e HORA, bem como o dado que se deseja armazenar no servidor. ex:</para><para><programlisting><codeline><highlight class="normal">$<sp/>telnet<sp/>127.0.0.1<sp/>1234</highlight></codeline>
<codeline><highlight class="normal">set<sp/>127.0.0.1</highlight></codeline>
<codeline><highlight class="normal">set<sp/>1496658174409<sp/>34</highlight></codeline>
</programlisting></para><para>Todos os comandos devem ser enviados na forma de literais. O indicador de data/hora é um long que armazena a quantidade de milisegundos passados desde a data 1/1/1970. O servidor, uma vez que receba essas sequências de literais, separa-as conforme a quantidade de espaços presentes e armazena os dados associados em uma estrutura local criada para esse fim.</para><para>Em se tratando de um projeto meramente acadêmico, pouco controle de erro é realizado nessa versão inicial.</para><para>Quando o servidor é executado, uma mensagem é exibida na aba <bold>Application Output</bold> do QtCreator mostrando o IP local do servidor, como ilustram as linhas a seguir:</para><para><programlisting><codeline><highlight class="normal">server<sp/>started<sp/>at:</highlight></codeline>
<codeline><highlight class="normal">&quot;192.168.1.106&quot;</highlight></codeline>
</programlisting></para><para><heading level="2">O módulo cliente produtor de dados</heading>
</para><para>O cliente produtor de dados deve ser capaz de se conectar a um servidor em execução e enviar comandos <bold>set</bold> para este servidor. Espera-se que esse módulo seja capaz de simular um processo de coleta e envio de dados para o servidor em intervalos periódicos.</para><para>A construção do cliente deve possibilitar o envio de dados (possivelmente aleatórios) para o servidor em intervalos regulares de tempo. Para isso, seu usuário deverá ser capaz de realizar as seguintes operações no módulo produtor:</para><para><itemizedlist>
<listitem><para>Indicar o IP do servidor ao qual se deseja conectar</para></listitem><listitem><para>Indicar a faixa de valores (min-max) que poderão ser enviados ao servidor</para></listitem><listitem><para>Indicar o intervalo de tempo entre o envio de dois dados consecutivos</para></listitem><listitem><para>Realizar a conexão ao pressionar um botão</para></listitem><listitem><para>Iniciar a transmissão de dados ao pressionar um botão</para></listitem><listitem><para>Finalizar a transmissão de dados ao pressionar um botão</para></listitem><listitem><para>Exibir os dados enviados em uma janela de texto</para></listitem></itemizedlist>
</para><para>Um exemplo de interface para o módulo produtor de dados é mostrado na figura que segue:</para><para><image type="html" name="dataproducer.png"></image>
</para><para><heading level="2">Consumidor de dados</heading>
</para><para>O consumidor de dados assume um papel mais complexo que o produtor. O produtor deve ser capaz de se conectar a um servidor indicado, recuperar os endereços das máquinas que produziram dados e traçar um gráfico data-hora x valor de uma sequência de dados fornecida pelo servidor.</para><para>O usuário do módulo consumidor de dados, o usuário deverá ter à sua disposição as seguintes funcionalidades:</para><para><itemizedlist>
<listitem><para>Indicar o endereço IP do servidor de dados ao qual o cliente deverá se conectar.</para></listitem><listitem><para>Iniciar a conexão com o servidor ao se pressionar um botão.</para></listitem><listitem><para>Uma vez conectado, o usuário deverá ter a disposição uma lista das máquinas que produziram dados no servidor. Isso pode ser implementado usando um <bold>listwidget</bold>.</para></listitem><listitem><para>No <bold>listwidget</bold> o usuário deverá ser capaz de selecionar a máquina cujos dados deseja visualizar.</para></listitem><listitem><para>Com uma máquina selecionada, dois botões deverão ficar disponíveis para o usuário: um para começar a receber os dados e outro para parar de receber.</para></listitem><listitem><para>Deverá ficar disponível a possibilidade de modificar o intervalo de tempo de captura entre dois conjuntos de dados consecutivos, ou seja, entre o envio de dois comandos _get </para></listitem></itemizedlist>
</para><para>Para cada recepção de dados, a ferramenta deverá traçar o gráfico tempo x valor do conjunto de dados lido do servidor. Algumas formas de traçado podem ser consideradas:</para><para><itemizedlist>
<listitem><para>Traçar todo intervalo de valores lido do servidor.</para></listitem><listitem><para>Traçar um subintervalo dos valores lidos (ex: desenhar apenas as últimas 30 amostras obtidas). Isso pode interessante para evitar que o gráfico fique sobrecarregado.</para></listitem></itemizedlist>
</para><para>Um exemplo de interface para o módulo consumidor de dados é mostrado na figura que segue:</para><para><image type="html" name="dataconsumer.png"></image>
 </para>    </detaileddescription>
  </compounddef>
</doxygen>
